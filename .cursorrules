{
    "name": "Quantum Autoencoder Assistant",
    "description": "Specialized rules for quantum autoencoder development using Qiskit V2 primitives",
    "rules": [
        {
            "name": "quantum_libraries",
            "pattern": "import (qiskit|pennylane|cirq|pyquil)",
            "message": "Ensure all quantum computing imports are at the top of the file and include necessary submodules. For Qiskit, use V2 primitives: from qiskit.primitives import SamplerV2 as Sampler, EstimatorV2 as Estimator"
        },
        {
            "name": "v2_primitives",
            "pattern": "(Sampler|Estimator)V?2?\\(",
            "message": "Ensure V2 primitives are used with proper options dictionary. Example: Sampler(options={'shots': 1024})"
        },
        {
            "name": "circuit_parameters",
            "pattern": "(QuantumCircuit|Circuit)\\(",
            "message": "Verify quantum circuit initialization includes all necessary qubits (input, latent, trash, reference, auxiliary) and classical registers named 'meas' for V2 compatibility"
        },
        {
            "name": "ansatz_definition",
            "pattern": "def.*ansatz",
            "message": "Check that ansatz implementation includes appropriate parameterization and follows quantum autoencoder architecture requirements. Consider hardware constraints for the target device."
        },
        {
            "name": "cost_function",
            "pattern": "def.*cost.*func",
            "message": "Ensure cost function properly implements SWAP test using V2 primitives and calculates fidelity between trash and reference states"
        },
        {
            "name": "optimizer_config",
            "pattern": "(COBYLA|SPSA|Adam)\\(",
            "message": "Verify optimizer configuration includes appropriate parameters for quantum circuit training. Consider using resilience options for error mitigation."
        },
        {
            "name": "state_preparation",
            "pattern": "def.*prepare.*state",
            "message": "Check state preparation methods handle both simple quantum states and encoded classical data correctly. Use proper parameter binding for V2 primitives."
        },
        {
            "name": "measurement_handling",
            "pattern": "measure|sampler",
            "message": "Ensure proper measurement setup using V2 primitives. Use 'meas' as classical register name and handle PubResults correctly."
        },
        {
            "name": "error_mitigation",
            "pattern": "noise|error|resilience",
            "message": "Consider implementing error mitigation techniques using V2 primitive options (resilience_level, dynamical_decoupling, etc.)"
        },
        {
            "name": "pub_handling",
            "pattern": "run\\(.*\\)",
            "message": "Ensure proper PUB (Program Under Batch) formatting for V2 primitives: (circuit, observable, parameters) for Estimator, (circuit, parameters) for Sampler"
        },
        {
            "name": "documentation",
            "pattern": "('''\"|#)",
            "message": "Include clear documentation for quantum circuit components, training process, and theoretical background. Document V2-specific features and options."
        }
    ],
    "settings": {
        "quantum_framework": "qiskit",
        "qiskit_version": ">=1.0.0",
        "primitive_version": "V2",
        "preferred_optimizer": "COBYLA",
        "default_shots": 1024,
        "resilience_level": 1,
        "documentation_level": "detailed"
    },
    "dependencies": [
        "qiskit>=1.0.0",
        "qiskit-machine-learning>=0.8.2",
        "numpy>=1.21.0",
        "matplotlib>=3.4.0",
        "scipy>=1.7.0"
    ],
    "recommended_practices": [
        "Always use V2 primitives (SamplerV2, EstimatorV2) for better hardware compatibility",
        "Initialize quantum registers with clear labeling and use 'meas' for classical registers",
        "Include proper error handling for quantum circuit operations",
        "Implement parameter initialization with appropriate ranges",
        "Use visualization tools for circuit analysis and training progress",
        "Implement proper validation methods for compressed states",
        "Consider hardware constraints when designing circuit depth",
        "Use PUBs (Programs Under Batch) for efficient circuit execution",
        "Implement appropriate error mitigation strategies using V2 options",
        "Handle measurement results using V2 primitive result format"
    ]
} 