{
    "name": "Quantum Autoencoder Assistant",
    "description": "Specialized rules for quantum autoencoder development",
    "rules": [
        {
            "name": "quantum_libraries",
            "pattern": "import (qiskit|pennylane|cirq|pyquil)",
            "message": "Ensure all quantum computing imports are at the top of the file and include necessary submodules"
        },
        {
            "name": "circuit_parameters",
            "pattern": "(QuantumCircuit|Circuit)\\(",
            "message": "Verify quantum circuit initialization includes all necessary qubits (input, latent, trash, reference, auxiliary) and classical registers"
        },
        {
            "name": "ansatz_definition",
            "pattern": "def.*ansatz",
            "message": "Check that ansatz implementation includes appropriate parameterization and follows quantum autoencoder architecture requirements"
        },
        {
            "name": "cost_function",
            "pattern": "def.*cost.*func",
            "message": "Ensure cost function properly implements SWAP test and calculates fidelity between trash and reference states"
        },
        {
            "name": "optimizer_config",
            "pattern": "(COBYLA|SPSA|Adam)\\(",
            "message": "Verify optimizer configuration includes appropriate parameters for quantum circuit training"
        },
        {
            "name": "state_preparation",
            "pattern": "def.*prepare.*state",
            "message": "Check state preparation methods handle both simple quantum states and encoded classical data correctly"
        },
        {
            "name": "measurement_handling",
            "pattern": "measure|sampler",
            "message": "Ensure proper measurement setup for training and validation of the autoencoder"
        },
        {
            "name": "error_mitigation",
            "pattern": "noise|error",
            "message": "Consider implementing error mitigation techniques for more robust quantum autoencoder performance"
        },
        {
            "name": "documentation",
            "pattern": "('''\"|#)",
            "message": "Include clear documentation for quantum circuit components, training process, and theoretical background"
        }
    ],
    "settings": {
        "quantum_framework": "qiskit",
        "preferred_optimizer": "COBYLA",
        "default_shots": 1024,
        "noise_model": "basic",
        "documentation_level": "detailed"
    },
    "dependencies": [
        "qiskit",
        "qiskit-machine-learning",
        "numpy",
        "matplotlib",
        "scipy"
    ],
    "recommended_practices": [
        "Always initialize quantum registers with clear labeling for different components",
        "Include proper error handling for quantum circuit operations",
        "Implement parameter initialization with appropriate ranges",
        "Use visualization tools for circuit analysis and training progress",
        "Implement proper validation methods for compressed states",
        "Consider hardware constraints when designing circuit depth"
    ]
} 